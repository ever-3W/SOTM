@inherits LayoutComponentBase
@using SOTM.MissionControl.Services
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navManager
@inject SettingsService settingsSvc
@inject IJSRuntime JSRuntime

<PageTitle>Mission Control: SOTM Random Draft Generator</PageTitle>

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<div>
    <MudAppBar Class="app-bar">
        <MudChip OnClick=@(GetChipOnClick("deck-select")) Class=@(GetChipClass("deck-select")) Label="true"> Select Decks </MudChip>
        <MudChip OnClick=@(GetChipOnClick("play-game")) Class=@(GetChipClass("play-game")) Label="true"> Play Game </MudChip>
        <MudChip OnClick=@(GetChipOnClick("history")) Class=@(GetChipClass("history")) Label="true"> History </MudChip>
        @* <MudChip OnClick=@(GetChipOnClick("statistics")) Class=@(GetChipClass("statistics")) Label="true"> Statistics </MudChip> *@
        <MudSpacer/>
        <MudChip OnClick=@(GetChipOnClick("collections")) Class=@(GetChipClass("collections")) Label="true"> Collections </MudChip>
        <MudChip OnClick="ToggleSettingsDrawer" Class=@(GetSettingsChipClass()) Label="true"> Settings </MudChip>
        @* <MudChip OnClick=@(GetChipOnClick("about")) Class=@(GetChipClass("about")) Label="true"> About </MudChip> *@
    </MudAppBar>
    <MudLayout Class="mud-height-full">
        <MudDrawer Anchor="Anchor.Right" Open="this.settingsDrawerOpen" Elevation="0" Variant="@DrawerVariant.Persistent" Color="Color.Primary" Class="px-4 settings-drawer">
            <MudForm>
                <MudStack>
                <MudText Typo="Typo.h6">Settings</MudText>

                <div>
                    <MudText Typo="Typo.subtitle2"> Number of heroes to select </MudText>
                    <MudNumericField 
                        @ref="draftHeroCountInput"
                        @bind-Value="settingsSvc.DraftHeroCount" 
                        Class="settings-input" 
                        Variant="Variant.Outlined" 
                        Margin="Margin.Dense" 
                        Min="3" 
                        Max="20" />
                </div>
                <div style="min-height: 140px;">
                    <MudText Typo="Typo.subtitle2"> Randomize heroes by... </MudText>
                    <MudSelect 
                        @ref="heroRandomizerMethodInput"
                        T="RandomizerMethod" 
                        @bind-Value="settingsSvc.HeroRandomizerMethod"
                        Class="settings-input" 
                        Margin="Margin.Dense" 
                        Variant="Variant.Outlined" 
                        AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="RandomizerMethod.RANDOMIZE_BY_DECK"> Deck </MudSelectItem>
                        <MudSelectItem Value="RandomizerMethod.RANDOMIZE_BY_VARIANT"> Variant </MudSelectItem>
                    </MudSelect>
                    <MudText @ref="heroRandomizerCaption" Typo="Typo.caption">@(this.RandomizeHeroTooltip)</MudText>
                </div>
                <div style="min-height: 140px;">
                    <MudText Typo="Typo.subtitle2"> Randomize villains by... </MudText>
                    <MudSelect
                        @ref="villainRandomizerMethodInput"
                        T="RandomizerMethod"
                        @bind-Value="settingsSvc.VillainRandomizerMethod"
                        Class="settings-input" 
                        Margin="Margin.Dense" Variant="Variant.Outlined" 
                        AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="RandomizerMethod.RANDOMIZE_BY_DECK"> Deck </MudSelectItem>
                        <MudSelectItem Value="RandomizerMethod.RANDOMIZE_BY_VARIANT"> Variant </MudSelectItem>
                    </MudSelect>
                    <MudText @ref="villainRandomizerCaption" Typo="Typo.caption">@(this.RandomizeVillainTooltip)</MudText>
                </div>
                <div>
                    <MudText Typo="Typo.subtitle2"> When a game ends... </MudText>
                    <MudSelect
                        @ref="gameEndActionInput"
                        T="GameEndAction" 
                        @bind-Value="settingsSvc.GameEndAction"
                        Class="settings-input" 
                        Margin="Margin.Dense" Variant="Variant.Outlined" 
                        AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="GameEndAction.RETURN_TO_DRAFT"> Return to selections </MudSelectItem>
                        <MudSelectItem Value="GameEndAction.START_NEW_GAME"> Set up new draft </MudSelectItem>
                    </MudSelect>
                </div>
                <div>
                    <MudText Typo="Typo.subtitle2"> When importing game history... </MudText>
                    <MudSelect
                        @ref="importHistoryModeInput"
                        T="ImportHistoryMode" 
                        @bind-Value="settingsSvc.ImportHistoryMode"
                        Class="settings-input" 
                        Margin="Margin.Dense" Variant="Variant.Outlined" 
                        AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="ImportHistoryMode.MERGE_EXISTING"> Merge existing entries </MudSelectItem>
                        <MudSelectItem Value="ImportHistoryMode.OVERWRITE_ALL"> Overwrite all entries </MudSelectItem>
                    </MudSelect>
                </div>
                <div>
                    <MudText Typo="Typo.subtitle2"> Draft auto-save interval (seconds) </MudText>
                    <MudSelect
                        T="int?" 
                        @bind-Value="settingsSvc.DraftAutoSaveInterval"
                        Class="settings-input" 
                        Margin="Margin.Dense" Variant="Variant.Outlined" 
                        AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem T="int?" Value="5"/>
                        <MudSelectItem T="int?" Value="10"/>
                        <MudSelectItem T="int?" Value="15"/>
                        <MudSelectItem T="int?" Value="30"/>
                        <MudSelectItem T="int?" Value="60"/>
                        <MudSelectItem T="int?" Value="120"/>
                        @* <MudSelectItem T="int?" Value="null"> Never </MudSelectItem> *@
                    </MudSelect>
                    <MudText Typo="Typo.caption">Draft selections are always saved whenever a new game is drafted.</MudText>
                </div>
                @* <MudButton 
                    StartIcon="@Icons.Material.Filled.Save" 
                    OnClick="SaveAndCloseSettings"
                    Variant="Variant.Filled" FullWidth="true" 
                    Class="settings-button">

                    Save and Exit
                </MudButton>

                <MudButton 
                    StartIcon="@Icons.Material.Filled.Download" 
                    Variant="Variant.Filled" FullWidth="true" 
                    Class="settings-button">

                    Export Settings
                </MudButton>

                <MudButton 
                    StartIcon="@Icons.Material.Filled.Input" 
                    Variant="Variant.Filled" FullWidth="true" 
                    Class="settings-button">

                    Import Settings
                </MudButton> *@

                <MudButton 
                    StartIcon="@Icons.Material.Filled.PowerSettingsNew" 
                    Variant="Variant.Filled" FullWidth="true" 
                    OnClick="ClearAllData"
                    Class="settings-button">

                    Reset All Data
                </MudButton>
                    
                </MudStack>
            </MudForm>
        </MudDrawer>
        <MudMainContent Class="px-4" Style="@($"padding-top: 62px; background-color:{Colors.Teal.Lighten5}; min-height: 100vh;")">
            @Body
        </MudMainContent>
    </MudLayout>
</div>

<style>
    .app-bar {
        height: 50px;
        background-color: @(Colors.Teal.Darken3);
    }
    .settings-drawer {
        padding-top: 62px;
        --mud-palette-primary: @(Colors.Teal.Lighten3);
        --mud-palette-primary-text: @(Colors.Teal.Darken4);
        --mud-drawer-width-right: 280px;
    }
    .settings-input {
        --mud-palette-text-primary: @(Colors.Teal.Darken4);
        --mud-palette-lines-inputs: @(Colors.Teal.Darken4);
        --mud-palette-action-default: @(Colors.Teal.Accent4);
    }
    .settings-button {
        color: @(Colors.Teal.Darken4);
        background-color: @(Colors.Teal.Lighten1);
    }
    .app-bar-chip, .app-bar-chip-active {
        color: @(Colors.Shades.White);
        font-weight: bold;
    }
    .app-bar-chip {
        background-color: @(Colors.Teal.Darken3);
    }
    .app-bar-chip-active {
        background-color: @(Colors.Teal.Darken4);
    }

    .villain-section {
        --pickable-text-color: @(Colors.Indigo.Darken4);
        color: var(--pickable-text-color); 
        background: @(Colors.Indigo.Lighten5);
    }
    .hero-section {
        --pickable-text-color: color-mix(in srgb, @(Colors.DeepOrange.Darken4) 80%, #000);
        color: var(--pickable-text-color);
        background: @(Colors.Amber.Lighten5);
    }
    .environment-section {
        --pickable-text-color: @(Colors.Green.Darken4);
        color: var(--pickable-text-color);
        background: @(Colors.Green.Lighten5);
    }
</style>

@code 
{
    public string GetChipClass(string uri)
    {
        return navManager.ToBaseRelativePath(navManager.Uri) == uri ? "app-bar-chip-active" : "app-bar-chip";
    }

    public Action GetChipOnClick(string uri)
    {
        return () =>
        {
            if (navManager.ToBaseRelativePath(navManager.Uri) != uri)
            {
                navManager.NavigateTo($"/{uri}");
            }
        };
    }

    public bool settingsDrawerOpen = false;

    public string GetSettingsChipClass()
    {
        return settingsDrawerOpen ? "app-bar-chip-active" : "app-bar-chip";
    }

    public void ToggleSettingsDrawer()
    {
        if (!this.settingsDrawerOpen)
        {
            @* this.draftHeroCountInput.Value = settingsSvc.DraftHeroCount;
            this.heroRandomizerMethodSetting = settingsSvc.HeroRandomizerMethod;
            this.villainRandomizerMethodSetting = settingsSvc.VillainRandomizerMethod;
            this.gameEndActionSetting = settingsSvc.GameEndAction;
            this.importHistoryModeSetting = settingsSvc.ImportHistoryMode; *@
        }
        this.settingsDrawerOpen = !this.settingsDrawerOpen;
    }

    public const string TOOLTIP_RANDOMIZE_HERO_BY_DECK = "Heroes will be randomly selected with equal probability. Then, each hero is assigned a non-banned variant.";
    public const string TOOLTIP_RANDOMIZE_VILLAIN_BY_DECK = "Villains will be randomly selected with equal probability. Then, each villain is assigned a non-banned variant.";
    public const string TOOLTIP_RANDOMIZE_HERO_BY_VARIANT = "Each hero variant has an equal probability to be selected.";
    public const string TOOLTIP_RANDOMIZE_VILLAIN_BY_VARIANT = "Each villain variant has an equal probability to be selected.";
    public MudNumericField<int> draftHeroCountInput;
    public MudSelect<RandomizerMethod> heroRandomizerMethodInput;
    public MudSelect<RandomizerMethod> villainRandomizerMethodInput; 
    public MudSelect<GameEndAction> gameEndActionInput;
    public MudSelect<ImportHistoryMode> importHistoryModeInput;
    public MudText heroRandomizerCaption;
    public MudText villainRandomizerCaption;

    public string RandomizeHeroTooltip
    {
        get => settingsSvc?.HeroRandomizerMethod == RandomizerMethod.RANDOMIZE_BY_DECK
            ? TOOLTIP_RANDOMIZE_HERO_BY_DECK
            : TOOLTIP_RANDOMIZE_HERO_BY_VARIANT;
    }

    public string RandomizeVillainTooltip
    {
        get => settingsSvc?.VillainRandomizerMethod == RandomizerMethod.RANDOMIZE_BY_DECK
            ? TOOLTIP_RANDOMIZE_VILLAIN_BY_DECK
            : TOOLTIP_RANDOMIZE_VILLAIN_BY_VARIANT;
    }

    private async void ClearAllData()
    {
        await localStorage.ClearAsync();
        navManager.Refresh();
    }

    protected override async Task OnInitializedAsync()
    {
        await settingsSvc.Load(localStorage);
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("JsFunctions.addKeyboardListeners");
    }
}
