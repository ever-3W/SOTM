@using SOTM.Shared.Models
@using SOTM.MissionControl.Models
@using SOTM.MissionControl.Services
@using System.Text.RegularExpressions
@inject DeckDataService deckData

@inherits ComponentBase

<MudCard Class="@($"pa-0 card-fix-width card-body {Class}")" Style="@($"background-color: var(--{(this.IsAnyVariantPickable ? "pickable-color" : "banned-color")});")">
    <MudCardHeader Class="@($"px-3 py-0 cursor-pointer {(this.IsAnyVariantPickable ? "card-head-pickable" : "card-head-banned")}")" @onclick="ToggleCardVariants">
        <CardHeaderContent>
            <MudText Class="@($"{(this.IsAnyVariantPickable ? "card-head-text-pickable" : "card-head-text-banned")}")"><b>@Title</b></MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent Class="pa-1">
        <MudToggleGroup T="GlobalIdentifier" Dense DisableRipple Vertical SelectionMode="SelectionMode.MultiSelection" @bind-Values="PickableVariants" Class="banned" SelectedClass="pickable">
            @foreach (var metadata in Variants)
            {
                <MudToggleItem Class="no-padding d-flex justify-space-between" Value="@metadata.identifier">
                    <MudText Typo="Typo.body2" Class=@($"py-0 pl-1 pr-0 flex-1 {(context ? "pickable-text" : "banned-text")}") Style="width: 160px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@metadata.shortTitle</MudText>
                    <div class="@($"flex-0 toggle-group-collection-marker{$"{(context ? "" : " variant-collection-marker-banned")}"}")" style="@($"background-color:{metadata.color}")"></div>
                </MudToggleItem>
            }
        </MudToggleGroup>
    </MudCardContent>
</MudCard>

<style>
    .card-head-pickable, .card-head-banned {
        background: var(--head-color);
        min-height: 35px;
    }
    .card-head-pickable {
        background: var(--head-color);
    }
    .card-head-banned {
        background: var(--banned-head-color);
    }
    .card-head-pickable:hover, .card-head-banned:hover {
        filter: brightness(135%); 
    }

    .card-head-text-pickable, .card-head-text-banned {
        max-width: 160px;
        white-space: nowrap; 
        overflow: hidden;
        text-overflow: ellipsis; 
        user-select: none;
    }
    .card-head-text-pickable {
        color: var(--pickable-text-color);
    }
    .card-head-text-banned {
        color: var(--banned-head-text-color);
        text-decoration: line-through;
    }

    .card-body {
        color: var(--pickable-text-color);
        background: var(--pickable-color);
    }

    .banned {
        background-color: var(--banned-color);
    }
    .banned:hover {
        background-color: var(--banned-color);
    }

    .pickable {
        background-color: var(--pickable-color);
    }
    .pickable:hover {
        background-color: var(--pickable-color);
    }

    .banned-text {
        color: var(--banned-text-color);
        text-decoration: line-through;
    }

    .pickable-text {
        color: var(--pickable-text-color);
    }

    .card-fix-width {
        max-width: 180px !important;
        width: 100% !important;
    }

    .no-padding {
        padding: 0px !important;
    }

    .toggle-group-collection-marker {
        width: 5px;
        height: 100%;
    }

    .variant-collection-marker-banned {
        filter: opacity(50%);
    }
</style>

@code
{

    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public List<DeckVariantViewModel> Variants { get; set; }

    [Parameter]
    public IEnumerable<GlobalIdentifier> PickableVariants { get; set; }

    public bool IsAnyVariantPickable { get => this.PickableVariants.Any(); }

    public void ToggleCardVariants()
    {
        if (this.IsAnyVariantPickable)
        {
            this.PickableVariants = Enumerable.Empty<GlobalIdentifier>();
        }
        else
        {
            this.PickableVariants = this.Variants.Select(v => v.identifier);
        }
    }

    [Parameter]
    public string Class { get; set; }
    public static List<DeckVariantViewModel> FromDeckModel(DeckDataService deckData, Deck deck)
    {
        return deckData.GetAllVariantViewModels(deck).ToList();
    }

    public static List<DeckVariantViewModel> FromExpansionModel(DeckDataService deckData, Expansion expansion)
    {
        return expansion.GetChildren().SelectMany(deck => deckData.GetAllVariantViewModels(deck))
            .ToList();
    }

    public IEnumerable<GlobalIdentifier> GetPickableVariants()
    {
        return this.PickableVariants;
    }
}
