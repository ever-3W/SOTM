@using SOTM.Shared.Models
@using SOTM.MissionControl.Models
@using SOTM.MissionControl.Services
@using System.Text.RegularExpressions
@inject DeckDataService deckData

@inherits ComponentBase

<MudCard Class="@($"pa-0 card-fix-width card-body {Class}")" Style="@($"background-color: var(--{(this.IsAnyVariantPickable ? "pickable-color" : "banned-color")});")">
    <MudCardHeader Class="@($"px-2 py-0 cursor-pointer {(this.IsAnyVariantPickable ? "card-head-pickable" : "card-head-banned")}")" @onclick="ToggleHeadingHandler">
        <CardHeaderContent>
            <MudText Typo="@(Title.Length > LARGE_TEXT_MAX_LENGTH ? Typo.subtitle2 : Typo.body1)" Class="@($"{(this.IsAnyVariantPickable ? "card-head-text-pickable" : "card-head-text-banned")}")"><b>@Title</b></MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent Class="pa-1">
        <MudToggleGroup T="GlobalIdentifier" Dense DisableRipple Vertical SelectionMode="SelectionMode.MultiSelection" @bind-Values:get="PickableVariants" @bind-Values:set="ValuesChangedHandler" Class="banned" SelectedClass="pickable">
            @foreach (var metadata in Variants)
            {
                <MudToggleItem Class="no-padding d-flex justify-space-between" Value="@metadata.identifier">
                    <MudText Typo="Typo.body2" Class=@($"py-0 pl-1 pr-0 flex-1 {(context ? "pickable-text" : "banned-text")}") Style="width: 160px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@metadata.shortTitle</MudText>
                    <div class="@($"flex-0 toggle-group-collection-marker{$"{(context ? "" : " variant-collection-marker-banned")}"}")" style="@($"background-color:{metadata.color}")"></div>
                </MudToggleItem>
            }
        </MudToggleGroup>
    </MudCardContent>
</MudCard>

<style>
    .card-head-pickable, .card-head-banned {
        background: var(--head-color);
        min-height: 35px;
    }
    .card-head-pickable {
        background: var(--head-color);
    }
    .card-head-banned {
        background: var(--banned-head-color);
    }
    .card-head-pickable:hover, .card-head-banned:hover {
        filter: brightness(135%); 
    }

    .card-head-text-pickable, .card-head-text-banned {
        max-width: 160px;
        white-space: nowrap; 
        overflow: hidden;
        text-overflow: ellipsis; 
        user-select: none;
    }
    .card-head-text-pickable {
        color: var(--pickable-text-color);
    }
    .card-head-text-banned {
        color: var(--banned-head-text-color);
        text-decoration: line-through;
    }

    .card-body {
        color: var(--pickable-text-color);
        background: var(--pickable-color);
    }

    .banned {
        background-color: var(--banned-color);
    }
    .banned:hover {
        background-color: var(--banned-color);
    }

    .pickable {
        background-color: var(--pickable-color);
    }
    .pickable:hover {
        background-color: var(--pickable-color);
    }

    .banned-text {
        color: var(--banned-text-color);
        text-decoration: line-through;
    }

    .pickable-text {
        color: var(--pickable-text-color);
    }

    .card-fix-width {
        max-width: 180px !important;
        width: 100% !important;
    }

    .no-padding {
        padding: 0px !important;
    }

    .toggle-group-collection-marker {
        width: 7px;
        height: 100%;
    }

    .variant-collection-marker-banned {
        filter: opacity(50%);
    }
</style>

@code
{
    private const int LARGE_TEXT_MAX_LENGTH = 18;

    private Dictionary<GlobalIdentifier, DeckVariantViewModel> _variantModelTable = new();
    private Dictionary<GlobalIdentifier, bool> _variantPickableTable = new();
    private Dictionary<Collection, IEnumerable<GlobalIdentifier>> _collectionSliceTable = new();

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public Collection ParentCollection { get; set; }
    [Parameter]
    public IEnumerable<DeckVariantViewModel> Variants
    { 
        get => _variantModelTable.Values; 
        set
        {
            _variantModelTable = value.ToDictionary(model => model.identifier);
            _variantPickableTable = value.ToDictionary(model => model.identifier, model => true);
            _collectionSliceTable = value
                .GroupBy(model => deckData.GetVariantCollection(model.identifier))
                .ToDictionary(g => g.Key, g => g.Select(model => model.identifier));
        }
    }
    [Parameter]
    public Action<DeckCard, GlobalIdentifier, bool> OnChangedTo { get; set; } = (_, _, _) => {};

    [Parameter]

    public Action<DeckCard, bool> OnToggleHeading { get; set; } = (_, _) => {};

    [Parameter]
    public IEnumerable<GlobalIdentifier> PickableVariants
    {
        get => _variantPickableTable.Keys.Where(identifier => _variantPickableTable[identifier]);
        set
        {
            foreach (var identifier in this.PickableVariants.Except(value))
            {
                _variantPickableTable[identifier] = false;
            }
            foreach (var identifier in value)
            {
                _variantPickableTable[identifier] = true;
            }
        }
    }

    public bool IsAnyVariantPickable { get => this.PickableVariants.Any(); }

    private void ToggleHeadingHandler()
    {
        this.OnToggleHeading(this, !this.IsAnyVariantPickable);
    }

    [Parameter]
    public string Class { get; set; }    
    public static List<DeckVariantViewModel> FromDeckModel(DeckDataService deckData, Deck deck)
    {
        return deckData.GetAllVariantViewModels(deck).ToList();
    }

    public static List<DeckVariantViewModel> FromExpansionModel(DeckDataService deckData, Expansion expansion)
    {
        return expansion.GetChildren().SelectMany(deck => deckData.GetAllVariantViewModels(deck))
            .ToList();
    }

    private void ValuesChangedHandler(IEnumerable<GlobalIdentifier> identifiers)
    {
        var changed = _variantPickableTable
            .Where(entry => identifiers.Contains(entry.Key) != entry.Value)
            .Select(entry => entry.Key);
        foreach (GlobalIdentifier identifier in changed)
        {
            this.OnChangedTo(this, identifier, identifiers.Contains(identifier));
        }
    }
    public void SetSingleValue(GlobalIdentifier identifier, bool changedValue)
    {
        if (this._variantPickableTable.ContainsKey(identifier))
        {
            this._variantPickableTable[identifier] = changedValue;
            StateHasChanged();
        }
    }
    public void SetAllValues(bool changedValue)
    {
        foreach (var identifier in this._variantPickableTable.Keys)
        {
            _variantPickableTable[identifier] = changedValue;
        }
        StateHasChanged();
    }
    public void ExcludeAllInCollection(Collection collection)
    {
        IEnumerable<GlobalIdentifier>? delta;
        if (_collectionSliceTable.TryGetValue(collection, out delta))
        {
            delta = delta.Where(identifier => _variantPickableTable[identifier]);
            if (delta.Any())
            {
                foreach (var identifier in delta)
                {
                    _variantPickableTable[identifier] = false;
                }
                StateHasChanged();
            }
        }
    }

    public void IncludeAllInCollection(Collection collection)
    {
        IEnumerable<GlobalIdentifier>? delta;
        if (_collectionSliceTable.TryGetValue(collection, out delta))
        {
            delta = delta.Where(identifier => !_variantPickableTable[identifier]);
            if (delta.Any())
            {
                foreach (var identifier in delta)
                {
                    _variantPickableTable[identifier] = true;
                }
                StateHasChanged();
            }
        }
    }
}
