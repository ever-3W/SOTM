@page "/deck-select"
@using SOTM.Shared.Models
@using SOTM.MissionControl.Models
@using SOTM.MissionControl.Services
@using SOTM.MissionControl.Utilities
@using System.Timers
@inject HttpClient httpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navManager
@inject DeckDataService deckData
@inject DraftRandomizerService randomizer
@inject DraftSelectionsService draftSelections
@inject GameService gameSvc
@inject SettingsService settingsSvc

@implements IDisposable

<div>
    <MudText> Click on "Draft New Game" to create a draft with randomized villain, hero, and environment decks. </MudText>
    <MudText> Click on any hero/villain/environment item to ban it from being selected. Clicking a banned item again will unban it. </MudText>
    <MudText> Clicking on a card heading will ban/unban all items listed on that card. </MudText>
    <MudText> Shift-click on any hero/villain/environment item (not heading) to ban/unban all other items from the same mod. </MudText>
</div>

<MudButton OnClick="DraftRandomGame" Variant="Variant.Filled" Class="draft-button">Draft New Game</MudButton>

<div Class="d-flex justify-space-around flex-1 flex-wrap gap-3">
    <MudCard Class="flex-1 pa-3 mb-3 villain-section" Outlined="true">
        <MudCardHeader Class="pa-0">
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Style="user-select: none;"><b>VILLAINS</b></MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Class="pa-0 d-flex align-content-start flex-wrap gap-3">
            @foreach (Expansion expansion in deckData.GetVillainExpansions()) 
            {
                <DeckCard 
                    @ref="villainDeckRef"
                    Title="@(expansion.shortTitle)"
                    Variants="@(DeckCard.FromExpansionModel(deckData, expansion))"
                    PickableVariants="@(expansion.GetChildren().SelectMany(deck => GetInitialPickableVariants(deck)))"
                    Class="villain-cards"
                    OnChangedTo="OnChangedTo"
                />
            }
        </MudCardContent>
    </MudCard>
    <MudCard Class="flex-1 pa-3 hero-section" Outlined="true">
        <MudCardHeader Class="pa-0">
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Style="user-select: none;"><b>HEROES</b></MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Class="pa-0">
            @foreach (Expansion expansion in deckData.GetHeroExpansions()) 
            {
                <MudCard Outlined Class="pa-3 mb-3" Style=@($"background: {Colors.Amber.Lighten4};")>
                    <MudCardHeader Class="pa-0 mb-2 hero-expansion-header">
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@expansion.title</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="pa-0 d-flex align-content-start flex-wrap gap-3">
                        @foreach (Deck deck in expansion.GetChildren())
                        {
                            <DeckCard 
                                @ref="heroDeckRef"
                                Title="@(deck.title)"
                                Variants="@(DeckCard.FromDeckModel(deckData, deck))"
                                PickableVariants="@(GetInitialPickableVariants(deck))"
                                Class="hero-cards"
                                OnChangedTo="OnChangedTo"
                            />
                        }
                    </MudCardContent>
                </MudCard>
            }
        </MudCardContent>
    </MudCard>
    <MudCard Class="flex-1 pa-3 mb-3 environment-section" Outlined="true">
        <MudCardHeader Class="pa-0">
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Style="user-select: none;"><b>ENVIRONMENTS</b></MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Class="pa-0 d-flex align-content-start flex-wrap gap-3">
            @foreach (Expansion expansion in deckData.GetEnvironmentExpansions()) 
            {
                <DeckCard 
                    @ref="environmentDeckRef"
                    Title="@(expansion.shortTitle)"
                    Variants="@(DeckCard.FromExpansionModel(deckData, expansion))"
                    PickableVariants="@(expansion.GetChildren().SelectMany(deck => GetInitialPickableVariants(deck)))"
                    Class="environment-cards"
                    OnChangedTo="OnChangedTo"
                />
            }
        </MudCardContent>
    </MudCard>
</div>

<style>
    .draft-button {
        color: @(Colors.Shades.White);
        background-color: @(Colors.Teal.Darken2);
        margin-top: 10px;
        margin-bottom: 10px;
    }
    .draft-button:hover {
        background-color: @(Colors.Teal.Lighten1) !important;
    }
    .villain-cards {
        --head-color: @(Colors.Indigo.Accent3);
        --pickable-color: @(Colors.Indigo.Accent1);
        --banned-color: @(Colors.Indigo.Lighten5);
        --banned-head-color: @(Colors.Indigo.Accent1);
        --banned-head-text-color: @(Colors.Indigo.Darken2);
        --banned-text-color: @(Colors.Indigo.Lighten2);
        --mud-palette-primary: @(Colors.Indigo.Accent2);
        --mud-palette-background-grey: @(Colors.Indigo.Lighten1);
        --mud-default-borderradius: 0px;
    }
    .hero-expansion-header {
        color: var(--pickable-text-color);
        user-select: none;
        margin-bottom: 2px;
        border-bottom: 1px solid var(--pickable-text-color);
    }
    .hero-cards {
        --head-color: @(Colors.Amber.Darken4);
        --pickable-color: @(Colors.Amber.Lighten1);
        --banned-color: @(Colors.Amber.Lighten4);
        --banned-head-color: @(Colors.Amber.Darken2);
        --banned-head-text-color: @(Colors.DeepOrange.Darken3);
        --banned-text-color: @(Colors.Amber.Darken1);
        --mud-palette-primary: @(Colors.Amber.Darken3);
        --mud-palette-background-grey: @(Colors.Amber.Darken3);
        --mud-default-borderradius: 0px;
    }
    .environment-cards {
        --head-color: @(Colors.Green.Darken1);
        --pickable-color: @(Colors.Green.Lighten2);
        --banned-color: @(Colors.Green.Accent1);
        --banned-head-color: @(Colors.Green.Lighten1);
        --banned-head-text-color: @(Colors.Green.Darken2);
        --banned-text-color: @(Colors.Green.Lighten1);
        --mud-palette-primary: @(Colors.Green.Default);
        --mud-palette-background-grey: @(Colors.Green.Default);
        --mud-default-borderradius: 0px;
    }
</style>

@code {
    private bool _shiftFlag = false;
    private int _autoSaveSeconds = 0;
    public Timer? _autoSaveTimer;
    private List<Components.DeckCard> heroDeckComponents = new List<Components.DeckCard>();
    Components.DeckCard heroDeckRef
    {
        set { heroDeckComponents.Add(value); }
    }
    private List<Components.DeckCard> villainDeckComponents = new List<Components.DeckCard>();
    Components.DeckCard villainDeckRef
    {
        set { villainDeckComponents.Add(value); }
    }
    private List<Components.DeckCard> environmentDeckComponents = new List<Components.DeckCard>();
    Components.DeckCard environmentDeckRef
    {
        set { environmentDeckComponents.Add(value); }
    }
    private IEnumerable<Components.DeckCard> AllDeckComponents()
    {
        return this.heroDeckComponents
            .Concat(this.villainDeckComponents)
            .Concat(this.environmentDeckComponents);
    }

    private async void DraftRandomGame()
    {
        var pickableVariantSet = await this.AutoSave();
        gameSvc.game = new Game(randomizer.DraftRandomClassicGame(deckData, settingsSvc, pickableVariantSet));
        await gameSvc.repo.Save(localStorage);

        navManager.NavigateTo("/play-game");
    }

    private IEnumerable<GlobalIdentifier> GetInitialPickableVariants(Deck deck)
    {
        return deckData.GetAllVariants(deck).Select(variant => variant.identifier)
            .Where(identifier => draftSelections.VariantIsPickable(identifier));
    }

    protected override async Task OnInitializedAsync()
    {
        await deckData.manifestRepo.Load(localStorage);
        var latestManifest = await httpClient.GetFromJsonAsync<CollectionManifest>("data/ModManifest.json");

        if (deckData.ListManifestDeltas(latestManifest).Count() > 0)
        {
            Console.WriteLine("Deltas found, rebuilding deck data collection");
            var sourceCollections = (await Task.WhenAll(
                latestManifest.files.Values.Select(async (entry) => 
                {
                    return await httpClient.GetFromJsonAsync<Collection>($"data/{entry.file}");
                })
            )).OrderBy(collection => latestManifest.files[collection.identifier.ToString()].sortOrder);
            deckData.BuildFromSourceCollections(sourceCollections);
            await deckData.repo.Save(localStorage);
            deckData.manifestRepo.value = latestManifest;
            await deckData.manifestRepo.Save(localStorage);
        }
        else
        {
            Console.WriteLine("No deltas found, skipping deck data rebuild");
            await deckData.Load(localStorage);
        }

        await draftSelections.repo.Load(localStorage);
        KeyboardEvents.AddKeyDownListener(this.OnKeyDown);
        KeyboardEvents.AddKeyUpListener(this.OnKeyUp);

        _autoSaveTimer = new Timer(1000);
        _autoSaveTimer.Elapsed += this.OnTimedEvent;
        _autoSaveTimer.AutoReset = true;
        _autoSaveTimer.Enabled = true;
        _autoSaveTimer.Start();
    }
    public void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        _autoSaveSeconds++;
        var interval = settingsSvc.DraftAutoSaveInterval;
        if (interval is not null && _autoSaveSeconds >= interval)
        {
            InvokeAsync(() =>
            {
                Console.WriteLine($"auto save timer is now {_autoSaveSeconds}");
                _autoSaveSeconds = 0;

                return AutoSave();
            });
        }
    }

    public async Task<HashSet<GlobalIdentifier>> AutoSave()
    {
        var pickableVariantSet = this.AllDeckComponents()
            .SelectMany(component => component.PickableVariants).ToHashSet();

        draftSelections.SetPickableVariants(pickableVariantSet);
        await draftSelections.repo.Save(localStorage); 
        return pickableVariantSet;
    }

    public void OnKeyDown (KeyboardEventArgs args)
    {
        if (args.Key == "Shift")
        {
            _shiftFlag = true;
        }
    }
    public void OnKeyUp (KeyboardEventArgs args)
    {
        if (args.Key == "Shift")
        {
            _shiftFlag = false;
        }
    }
    public void Dispose()
    {
        _autoSaveTimer?.Dispose();
        KeyboardEvents.RemoveKeyDownListener(this.OnKeyDown);
        KeyboardEvents.RemoveKeyUpListener(this.OnKeyUp);
    }

    public void OnChangedTo(Components.DeckCard source, GlobalIdentifier identifier, bool changedValue)
    {
        if (_shiftFlag)
        {
            var collection = deckData.GetSourceCollection(identifier);
            if (changedValue)
            {
                foreach (Components.DeckCard component in this.AllDeckComponents())
                {
                    component.IncludeAllInCollection(collection);
                }
            }
            else
            {
                foreach (Components.DeckCard component in this.AllDeckComponents())
                {
                    component.ExcludeAllInCollection(collection);
                }
            }
        }
        else
        {
            source.SetSingleValue(identifier, changedValue);
        }
    }
}
