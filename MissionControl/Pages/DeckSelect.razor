@page "/deck-select"
@using SOTM.Shared.Models
@using SOTM.MissionControl.Models
@using SOTM.MissionControl.Services
@using SOTM.MissionControl.Utilities
@using System.Timers
@inject HttpClient httpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navManager
@inject DeckDataService deckData
@inject DraftRandomizerService randomizer
@inject DraftSelectionsService draftSelections
@inject GameService gameSvc
@inject SettingsService settingsSvc
@inject IBrowserViewportService viewportSvc

@implements IBrowserViewportObserver
@implements IDisposable

<div>
    <MudText> Click on "Draft New Game" to create a draft with randomized villain, hero, and environment decks. </MudText>
    <MudText> Click on any hero/villain/environment item to ban it from being selected. Clicking a banned item again will unban it. </MudText>
    <MudText> Clicking on a card heading will ban/unban all items listed on that card. </MudText>
    <MudText> Shift-click on any hero/villain/environment to ban/unban all other items from the same mod. </MudText>
</div>

<MudButton OnClick="DraftRandomGame" Variant="Variant.Filled" Class="action-button">Draft New Game</MudButton>

<MudGrid Spacing="2" Justify="Justify.FlexStart">
    <MudItem md="3">
        <MudCard Class="flex-1 pa-3 mb-3 villain-section" Outlined="true">
            <MudCardHeader Class="pa-0 mb-2 group-header">
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" Style="user-select: none;"><b>VILLAINS</b></MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="pa-0 d-flex align-content-start flex-wrap gap-3">
                @foreach (Collection collection in deckData.Collections.Where((collection) => collection.villainExpansions.Count() > 0))
                {
                    <DeckCardList
                        @ref="villainCardListRef"
                        Class="villain-card-list"
                        CardClass="villain-cards"
                        ParentCollection="collection"
                        VariantGroups=@(collection.villainExpansions.Select(deckData.GetExpansionGroupViewModel))
                        PickableIdentifiers="@(draftSelections.GetPickableVariantSet())"
                        Title=@(collection.title)
                        sm="3"
                        md="12"
                        lg="6"
                        OnChangedTo="OnChangedTo"
                        OnToggleHeading="OnToggleHeading"
                    />
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem md="6">
        <MudCard Class="flex-1 pa-3 hero-section" Outlined="true">
            <MudCardHeader Class="pa-0 mb-2 group-header">
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" Style="user-select: none;"><b>HEROES</b></MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="pa-0">
                <MudGrid Spacing="2">
                    @foreach (Collection collection in deckData.Collections)
                    {
                        @foreach (Expansion expansion in collection.heroExpansions.Where((e) => e.GetChildren().Count() > 0))
                        {
                            bool useHalfStyle = _breakpoint != Breakpoint.Md && expansion.GetChildren().Count() <= 2;
                            <MudItem sm=@(useHalfStyle ? 6 : 12) md="12" lg=@(useHalfStyle ? 6 : 12)>
                                <DeckCardList
                                    @ref="heroCardListRef"
                                    Class="hero-card-list"
                                    CardClass="hero-cards"
                                    ParentCollection="collection"
                                    VariantGroups=@(expansion.GetChildren().Select(deckData.GetDeckGroupViewModel))
                                    PickableIdentifiers="@(draftSelections.GetPickableVariantSet())"
                                    Title=@(expansion.title)
                                    sm="@(useHalfStyle ? 6 : 3)"
                                    md="4"
                                    lg="@(useHalfStyle ? 6 : 3)"
                                    OnChangedTo="OnChangedTo"
                                    OnToggleHeading="OnToggleHeading"
                                />
                            </MudItem>
                        }
                    }
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem md="3">
        <MudCard Class="flex-1 pa-3 mb-3 environment-section" Outlined="true">
            <MudCardHeader Class="pa-0 mb-2 group-header">
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" Style="user-select: none;"><b>ENVIRONMENTS</b></MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="pa-0 d-flex align-content-start flex-wrap gap-3">
                @foreach (Collection collection in deckData.Collections.Where((collection) => collection.environmentExpansions.Count() > 0))
                {
                    <DeckCardList
                        @ref="environmentCardListRef"
                        Class="environment-card-list"
                        CardClass="environment-cards"
                        ParentCollection="collection"
                        VariantGroups=@(collection.environmentExpansions.Select(deckData.GetExpansionGroupViewModel))
                        PickableIdentifiers="@(draftSelections.GetPickableVariantSet())"
                        Title=@(collection.title)
                        sm="3"
                        md="12"
                        lg="6"
                        OnChangedTo="OnChangedTo"
                        OnToggleHeading="OnToggleHeading"
                    />
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<style>
    .villain-card-list {
        background-color: @(Colors.Indigo.Lighten4);
    }
    .villain-cards {
        --head-color: @(Colors.Indigo.Accent3);
        --pickable-color: @(Colors.Indigo.Accent1);
        --banned-color: @(Colors.Indigo.Lighten5);
        --banned-head-color: @(Colors.Indigo.Accent1);
        --banned-head-text-color: @(Colors.Indigo.Darken2);
        --banned-text-color: @(Colors.Indigo.Lighten2);
        --mud-palette-primary: @(Colors.Indigo.Accent2);
        --mud-palette-background-grey: @(Colors.Indigo.Lighten1);
        --mud-default-borderradius: 0px;
    }
    .group-header {
        color: var(--pickable-text-color);
        user-select: none;
        margin-bottom: 2px;
        border-bottom: 1px solid var(--pickable-text-color);
    }
    .hero-card-list {
        background-color: @(Colors.Amber.Lighten4);
    }
    .hero-cards {
        --head-color: @(Colors.Amber.Darken4);
        --pickable-color: @(Colors.Amber.Lighten1);
        --banned-color: @(Colors.Amber.Lighten4);
        --banned-head-color: @(Colors.Amber.Darken2);
        --banned-head-text-color: @(Colors.DeepOrange.Darken3);
        --banned-text-color: @(Colors.Amber.Darken1);
        --mud-palette-primary: @(Colors.Amber.Darken3);
        --mud-palette-background-grey: @(Colors.Amber.Darken3);
        --mud-default-borderradius: 0px;
    }
    .environment-card-list {
        background-color: @(Colors.Green.Lighten4);
    }
    .environment-cards {
        --head-color: @(Colors.Green.Darken1);
        --pickable-color: @(Colors.Green.Lighten2);
        --banned-color: @(Colors.Green.Accent1);
        --banned-head-color: @(Colors.Green.Lighten1);
        --banned-head-text-color: @(Colors.Green.Darken2);
        --banned-text-color: @(Colors.Green.Lighten1);
        --mud-palette-primary: @(Colors.Green.Default);
        --mud-palette-background-grey: @(Colors.Green.Default);
        --mud-default-borderradius: 0px;
    }
</style>

@code {
    private Breakpoint _breakpoint;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await viewportSvc.SubscribeAsync(this, fireImmediately: true);
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();
    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        _breakpoint = browserViewportEventArgs.Breakpoint;
        return InvokeAsync(StateHasChanged);
    }

    private bool _shiftFlag = false;
    private int _autoSaveSeconds = 0;
    public Timer? _autoSaveTimer;
    private List<Components.DeckCard> heroDeckComponents = new List<Components.DeckCard>();
    Components.DeckCard heroDeckRef
    {
        set { heroDeckComponents.Add(value); }
    }

    private List<Components.DeckCardList> heroCardListComponents = new();
    Components.DeckCardList heroCardListRef
    {
        set { heroCardListComponents.Add(value); }
    }
    private List<Components.DeckCardList> villainCardListComponents = new();
    Components.DeckCardList villainCardListRef
    {
        set { villainCardListComponents.Add(value); }
    }
    private List<Components.DeckCardList> environmentCardListComponents = new();
    Components.DeckCardList environmentCardListRef
    {
        set { environmentCardListComponents.Add(value); }
    }
    private List<Components.DeckCard> villainDeckComponents = new List<Components.DeckCard>();
    Components.DeckCard villainDeckRef
    {
        set { villainDeckComponents.Add(value); }
    }
    private List<Components.DeckCard> environmentDeckComponents = new List<Components.DeckCard>();
    Components.DeckCard environmentDeckRef
    {
        set { environmentDeckComponents.Add(value); }
    }
    private IEnumerable<Components.DeckCard> AllDeckComponents()
    {
        return this.heroCardListComponents.SelectMany((component) => component.DeckComponents)
            .Concat(this.villainCardListComponents.SelectMany((component) => component.DeckComponents))
            .Concat(this.environmentCardListComponents.SelectMany((component) => component.DeckComponents));
    }

    private async void DraftRandomGame()
    {
        var pickableVariantSet = await this.AutoSave();
        gameSvc.NewGame(new Game(randomizer.DraftRandomClassicGame(deckData, settingsSvc, pickableVariantSet)));
        await gameSvc.Save(localStorage);

        navManager.NavigateTo("/play-game");
    }

    private IEnumerable<GlobalIdentifier> GetInitialPickableVariants(Deck deck)
    {
        return deckData.GetAllVariants(deck).Select(variant => variant.identifier)
            .Where(identifier => draftSelections.VariantIsPickable(identifier));
    }

    protected override async Task OnInitializedAsync()
    {
        var savedManifest = await deckData.LoadManifestData(localStorage);
        var latestManifest = await httpClient.GetFromJsonAsync<CollectionManifest>("data/ModManifest.json");

        if (latestManifest is not null && CollectionManifest.ListDeltas(savedManifest, latestManifest).Count() > 0)
        {
            Console.WriteLine("Deltas found, rebuilding deck data collection");
            var sourceCollections = (await Task.WhenAll(
                latestManifest.files.Values.Select(async (entry) => 
                {
                    return await httpClient.GetFromJsonAsync<Collection>($"data/{entry.file}");
                })
            ))
                .Where(collection => collection is not null)
                .OrderBy(collection => latestManifest.files[collection!.identifier.ToString()].sortOrder);
            deckData.BuildFromSourceCollections(sourceCollections);
            await deckData.SaveDeckData(localStorage);
            deckData.CollectionManifest = latestManifest;
            await deckData.SaveManifestData(localStorage);
        }
        else
        {
            Console.WriteLine("No deltas found, skipping deck data rebuild");
            await deckData.Load(localStorage);
        }

        await draftSelections.Load(localStorage);
        KeyboardEvents.AddKeyDownListener(this.OnKeyDown);
        KeyboardEvents.AddKeyUpListener(this.OnKeyUp);

        _autoSaveTimer = new Timer(1000);
        _autoSaveTimer.Elapsed += this.OnTimedEvent;
        _autoSaveTimer.AutoReset = true;
        _autoSaveTimer.Enabled = true;
        _autoSaveTimer.Start();
    }
    public void OnTimedEvent(Object? source, ElapsedEventArgs e)
    {
        _autoSaveSeconds++;
        var interval = settingsSvc.DraftAutoSaveInterval;
        if (interval is not null && _autoSaveSeconds >= interval)
        {
            InvokeAsync(() =>
            {
                _autoSaveSeconds = 0;
                return AutoSave();
            });
        }
    }

    public async Task<HashSet<GlobalIdentifier>> AutoSave()
    {
        var pickableVariantSet = this.AllDeckComponents()
            .SelectMany(component => component.PickableVariants).ToHashSet();

        draftSelections.SetPickableVariants(pickableVariantSet);
        await draftSelections.Save(localStorage); 
        return pickableVariantSet;
    }

    public void OnKeyDown (KeyboardEventArgs args)
    {
        if (args.Key == "Shift")
        {
            _shiftFlag = true;
        }
    }
    public void OnKeyUp (KeyboardEventArgs args)
    {
        if (args.Key == "Shift")
        {
            _shiftFlag = false;
        }
    }
    public void Dispose()
    {
        _autoSaveTimer?.Dispose();
        KeyboardEvents.RemoveKeyDownListener(this.OnKeyDown);
        KeyboardEvents.RemoveKeyUpListener(this.OnKeyUp);
    }

    public void OnChangedTo(Components.DeckCard source, GlobalIdentifier identifier, bool changedValue)
    {
        if (_shiftFlag)
        {
            var collection = source.ParentCollection;
            if (changedValue)
            {
                foreach (Components.DeckCard component in this.AllDeckComponents())
                {
                    component.IncludeAllInCollection(collection);
                }
            }
            else
            {
                foreach (Components.DeckCard component in this.AllDeckComponents())
                {
                    component.ExcludeAllInCollection(collection);
                }
            }
        }
        else
        {
            source.SetSingleValue(identifier, changedValue);
        }
    }

    public void OnToggleHeading(Components.DeckCard source, bool changedValue)
    {
        if (_shiftFlag)
        {
            var collection = source.ParentCollection;
            var otherComponents = this.AllDeckComponents().Except([source]);
            if (changedValue)
            {
                foreach (Components.DeckCard component in otherComponents)
                {
                    component.IncludeAllInCollection(collection);
                }
            }
            else
            {
                foreach (Components.DeckCard component in otherComponents)
                {
                    component.ExcludeAllInCollection(collection);
                }
            }
        }
        source.SetAllValues(changedValue);
    }
}
