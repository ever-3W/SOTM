@page "/play-game"
@using MudBlazor.Utilities
@using SOTM.Shared.Models
@using SOTM.MissionControl.Models
@using SOTM.MissionControl.Services
@inject HttpClient httpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navManager
@inject DeckDataService deckData
@inject DraftRandomizerService randomizer
@inject DraftSelectionsService draftSelections
@inject GameService gameSvc
@inject GameLogService gameLog
@inject SettingsService settingsSvc

<div Class="d-flex justify-space-around flex-1 flex-row gap-3" Style="min-width:0; overflow: scroll;">
    <MudCard Class="flex-0 pa-3 mb-3" Style="@($"color:{Colors.Indigo.Darken2}; background:{Colors.Indigo.Lighten5};")">
        <MudCardContent Class="d-flex flex-column pa-0" Style="height: 550px;">
            <div class="flex-0">
                <MudText Align="Align.Center" Typo="Typo.h6" Style="@($"user-select: none; color: {Colors.Indigo.Darken4};")">VILLAIN</MudText>
            </div>
            <div class="flex-0 pa-4 rounded d-flex justify-space-around" style="border-width: 5px;">
                <CharacterCard
                    Class="villain-character"
                    VariantMetadata="this.GetSelectedVillainEntity()"
                    DefaultTitle="Unknown Villain"/>
            </div>
            <MudSpacer />
            <div class="flex-0" style="box-sizing: border-box;">
                <MudButton 
                    Disabled="uiController.RandomizeButtonDisabled()" 
                    OnClick="DraftRandomGame"
                    @onmouseover="uiController.RandomizeBtnHover"
                    @onmouseout="uiController.RandomizeBtnUnhover"
                    StartIcon="@Icons.Material.Filled.Refresh" 
                    Variant="Variant.Filled" FullWidth="true" 
                    Style=@($"color:{Colors.Indigo.Darken4}; background:{Colors.Indigo.Accent2};")>

                    Re-randomize
                </MudButton> <br/>
                <MudButton
                    StartIcon="@Icons.Material.Filled.ArrowBack"
                    OnClick="BackToDraft"
                    @onmouseover="uiController.BackBtnHover"
                    @onmouseout="uiController.BackBtnUnhover"
                    Variant="Variant.Filled" FullWidth="true"
                    Style=@($"color:{Colors.Indigo.Darken4}; background:{Colors.Indigo.Accent2}; margin-top: 15px;")>

                    Edit Selections
                </MudButton>
            </div>
        </MudCardContent>
    </MudCard>
    <MudCard Class="flex-1 pa-3 mb-3" Style="@($"color:{Colors.Amber.Darken3}; background:{Colors.Amber.Lighten5};")">
        <MudCardContent Class="pa-0 align-content-start gap-3 relative" Style="width: 100%; height:550px;">
            <MudDropContainer Class="align-content-space-between d-flex flex-column absolute" T="HeroCharacterDropItem" @ref="heroDropContainerRef" Items="@heroDropZoneItems" ItemsSelector="@((item, dropzone) => item.isPicked == (dropzone == "Picked"))" ItemDropped="ItemUpdated" Style="min-width: 0; width:100%; height:100%;">
                <ChildContent>
                    <div class="flex-0 align-content-start">
                        <MudText Align="Align.Center" Typo="Typo.h6" Class="hero-cc-dropzone-text">HEROES</MudText>
                        <MudDropZone ItemIsDisabled="ItemIsDisabled" T="HeroCharacterDropItem" Identifier="Picked" Class="rounded d-flex pa-4 ma-0 flex-1 gap-3 hero-cc-dropzone" AllowReorder="true">
                        </MudDropZone>
                    </div>
                    <MudSpacer />
                    <div class="flex-0 align-content-start">
                        <MudText Align="Align.Center" Typo="Typo.h6" Class="@($"{(DropZonesDisabled() ? "hero-cc-dropzone-text-disabled" : "hero-cc-dropzone-text")}")">AVAILABLE HEROES</MudText>
                        <MudDropZone ItemIsDisabled="ItemIsDisabled" T="HeroCharacterDropItem" Identifier="Benched" Class="@($"rounded d-flex pa-4 ma-0 flex-1 gap-3 {(DropZonesDisabled() ? "hero-cc-dropzone-disabled" : "hero-cc-dropzone")}")" AllowReorder="true" DisabledClass="hero-character-disabled">
                        </MudDropZone>
                        <MudText Align="Align.Center" Typo="Typo.subtitle2" Style="@($"margin-top: 5px; color: {Colors.Red.Darken4};")">@(uiController.GetBottomTooltipText())</MudText>
                    </div>
                </ChildContent>
                <ItemRenderer>
                    <CharacterCard
                        Class="hero-character"
                        VariantMetadata="@context.entity"/>
                </ItemRenderer>
            </MudDropContainer>
        </MudCardContent>
    </MudCard>
    <MudCard Class="flex-grow-0 pa-3 mb-3" Style="@($"color:{Colors.Green.Darken2}; background:{Colors.Green.Lighten5};")">
        <MudCardContent Class="d-flex flex-column pa-0" Style="width: 100%; height:550px;">
            <div class="flex-0">
                <MudText Align="Align.Center" Typo="Typo.h6" Style="@($"user-select: none; color: {Colors.Green.Darken4};")">ENVIRONMENT</MudText>
            </div>
            <div class="flex-0 pa-4 rounded d-flex justify-space-around" style="border-width: 5px;">
                <CharacterCard
                    Class="environment-character"
                    VariantMetadata="this.GetSelectedEnvironmentEntity()"
                    DefaultTitle="Unknown Environment"/>
            </div>
            <MudSpacer />
            <div class="flex-0" style="box-sizing: border-box;">
                <MudButton
                    Class=@($"{uiController.OutcomeButtonVisibility()}")
                    OnClick="EndGameWin"
                    @onmouseover="uiController.WinBtnHover"
                    @onmouseout="uiController.WinBtnUnhover"
                    StartIcon="@Icons.Material.Filled.EmojiEvents"
                    Variant="Variant.Filled" FullWidth="true"
                    Style=@($"margin-top: 15px; color:{Colors.Shades.White}; background:{Colors.Green.Accent4};")>

                    Win
                </MudButton> <br/>
                
                <MudButton 
                    Class=@($"{uiController.OutcomeButtonVisibility()}")
                    OnClick="EndGameLoss"
                    @onmouseover="uiController.LossBtnHover"
                    @onmouseout="uiController.LossBtnUnhover"
                    StartIcon="@Icons.Material.Filled.ThumbDown"
                    Variant="Variant.Filled" FullWidth="true"
                    Style=@($"margin-top: 15px; color:{Colors.Shades.White}; background:{Colors.Amber.Darken3};")>

                    Loss
                </MudButton> <br/>

                <MudButton 
                    Disabled="uiController.StartButtonDisabled()" 
                    OnClick="StartGame"
                    Variant="Variant.Filled" FullWidth="true"
                    Style=@($"margin-top: 15px; color:{Colors.Shades.White}; background:{Colors.Red.Default};")>

                    Fight!
                </MudButton>
            </div>
        </MudCardContent>
    </MudCard>
</div>

<style>
    .villain-character {
        --character-card-text-color: @(Colors.Indigo.Darken4);
        --character-card-color: @(Colors.Indigo.Lighten2);
    }
    .hero-character {
        --character-card-text-color: @(Colors.DeepOrange.Darken4);
        --character-card-color: @(Colors.Amber.Lighten1);
    }
    .hero-character-disabled > .mud-card {
        --character-card-text-color: #e5aa8c;
        --character-card-color: #ffe697;
    }
    .environment-character {
        --character-card-text-color: @(Colors.Green.Darken4);
        --character-card-color: @(Colors.Green.Lighten2);
    }
    .hero-cc-dropzone, .hero-cc-dropzone-disabled {
        height: 210px;
        min-width: 0;
        overflow-x: scroll;
        border-width: 5px;
        overflow-y: hidden;
    }
    .hero-cc-dropzone {
        --mud-palette-primary: @(Colors.Amber.Darken4);
    }
    .hero-cc-dropzone-disabled {
        --mud-palette-primary: #ffc187;
        border-color: #ffc187;
    }
    .hero-cc-dropzone-text {
        color: @(Colors.Amber.Darken4);
        user-select: none;
    }
    .hero-cc-dropzone-text-disabled {
        color: #ffc187;
        user-select: none;
    }
</style>

@code {

    // Helper functions to toggle states of buttons / bottom tooltip
    public class UIController
    {
        protected const string TOOLTIP_PICK_DEFAULT = "Assemble your team by dragging 3-5 available hero cards to the top.";
        protected const string TOOLTIP_PICK_READY_START = "Continue editing your hero selections, or press the \"Fight!\" button on the right.";
        protected const string TOOLTIP_PICK_TOO_MANY_HEROES = "Only a maximum of 5 heroes can be selected.";
        protected const string TOOLTIP_RANDOMIZE = "Generate a new random draft (villain, hero, and environment) with the same ban settings.";
        protected const string TOOLTIP_GAME = "The game has started. Good luck!";
        protected const string TOOLTIP_BACK = "Return to the previous page. The current draft will NOT be saved.";
        protected const string TOOLTIP_CANCEL = "End the current game and return to the previous page. The current game will NOT be saved.";
        protected const string TOOLTIP_WIN = "End the current game and save it as a win.";
        protected const string TOOLTIP_LOSS = "End the current game and save it as a loss.";
        private bool randomizeButtonHovered = false;
        private bool backButtonHovered = false;
        private bool winButtonHovered = false;
        private bool lossButtonHovered = false;
        private bool gameHasStarted = false;
        private int pickedHeroCount = 0;

        public void RandomizeBtnHover()
        {
            this.randomizeButtonHovered = true;
        }
        public void RandomizeBtnUnhover()
        {
            this.randomizeButtonHovered = false;
        }
        public void BackBtnHover()
        {
            this.backButtonHovered = true;
        }
        public void BackBtnUnhover()
        {
            this.backButtonHovered = false;
        }
        public void WinBtnHover()
        {
            this.winButtonHovered = true;
        }
        public void WinBtnUnhover()
        {
            this.winButtonHovered = false;
        }
        public void LossBtnHover()
        {
            this.lossButtonHovered = true;
        }
        public void LossBtnUnhover()
        {
            this.lossButtonHovered = false;
        }
        public void GameHasStarted()
        {
            this.gameHasStarted = true;
        }
        public void GameHasEnded()
        {
            this.gameHasStarted = false;
        }
        public void SetPickedHeroCount(int count)
        {
            this.pickedHeroCount = count;
        }

        public bool RandomizeButtonDisabled()
        {
            return this.gameHasStarted;
        }
        public bool StartButtonDisabled()
        {
            return (this.gameHasStarted) || (this.pickedHeroCount < 3) || (this.pickedHeroCount > 5);
        }
        public string OutcomeButtonVisibility()
        {
            return this.gameHasStarted ? "" : "invisible";
        }
        public string GetBottomTooltipText()
        {
            if (this.gameHasStarted)
            {
                if (this.backButtonHovered)
                {
                    return TOOLTIP_CANCEL;
                }
                if (this.winButtonHovered)
                {
                    return TOOLTIP_WIN;
                }
                if (this.lossButtonHovered)
                {
                    return TOOLTIP_LOSS;
                }
                return TOOLTIP_GAME;
            }
            if (this.backButtonHovered)
            {
                return TOOLTIP_BACK;
            }
            if (this.randomizeButtonHovered)
            {
                return TOOLTIP_RANDOMIZE;
            }
            if (this.pickedHeroCount > 5)
            {
                return TOOLTIP_PICK_TOO_MANY_HEROES;
            }
            else if (this.pickedHeroCount >= 3)
            {
                return TOOLTIP_PICK_READY_START;
            }
            return TOOLTIP_PICK_DEFAULT;
        }
    }
    public UIController uiController = new();

    public class HeroCharacterDropItem
    {
        public DeckVariantViewModel entity { get; init; }
        public bool isPicked = false;
        public int Order { get; set; }
    }

    public void ItemUpdated(MudItemDropInfo<HeroCharacterDropItem> dropItem)
    {
        dropItem.Item.isPicked = dropItem.DropzoneIdentifier == "Picked";
        int pickedHeroCount = this.heroDropZoneItems.Count(item => item.isPicked);
        var indexOffset = dropItem.DropzoneIdentifier == "Picked" ? 0 : pickedHeroCount;

        this.heroDropZoneItems.UpdateOrder(dropItem, dropItem => dropItem.Order, indexOffset);
        this.heroDropZoneItems = this.heroDropZoneItems.OrderBy(item => item.Order).ToList();

        this.uiController.SetPickedHeroCount(pickedHeroCount);
        StateHasChanged();
        this.heroDropContainerRef.Refresh();
    }

    public bool DropZonesDisabled()
    {
        return gameSvc.game == null || gameSvc.game.state == GameState.PLAY;
    }
    public bool ItemIsDisabled(HeroCharacterDropItem item)
    {
        return DropZonesDisabled();
    }

    private MudDropContainer<HeroCharacterDropItem> heroDropContainerRef;
    private List<HeroCharacterDropItem> heroDropZoneItems = [];

    private DeckVariantViewModel? GetSelectedVillainEntity()
    {
        return deckData.GetVariantMetadata(deckData.GetVariantData(gameSvc.game?.draft.villains.ElementAtOrDefault(0)));
    }

    private DeckVariantViewModel? GetSelectedEnvironmentEntity()
    {
        return deckData.GetVariantMetadata(deckData.GetVariantData(gameSvc.game?.draft.environments.ElementAtOrDefault(0)));
    }

    protected override async Task OnInitializedAsync()
    {
        await deckData.Load(localStorage);
        await gameSvc.repo.Load(localStorage);
        await gameLog.repo.Load(localStorage);

        this.heroDropZoneItems = gameSvc.game?.draft.heroes.Select(
            (identifier, index) => new HeroCharacterDropItem()
            {
                entity = deckData.GetVariantMetadata(deckData.GetVariantData(identifier)),
                isPicked = false,
                Order = index
            }
        ).ToList() ?? [];
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        this.heroDropContainerRef.Refresh();
    }

    private async Task DraftRandomGame()
    {
        await draftSelections.repo.Load(localStorage);
        gameSvc.game = new Game(randomizer.DraftRandomClassicGame(deckData, settingsSvc, draftSelections.GetPickableVariantSet()));

        this.heroDropZoneItems = gameSvc.game?.draft.heroes.Select(
            (identifier, index) => new HeroCharacterDropItem()
            {
                entity = deckData.GetVariantMetadata(deckData.GetVariantData(identifier)),
                isPicked = false,
                Order = index
            }
        ).ToList() ?? [];
        StateHasChanged();
        this.heroDropContainerRef.Refresh();

        await gameSvc.repo.Save(localStorage);
    }

    private async void BackToDraft()
    {
        navManager.NavigateTo("/deck-select");
    }

    private async void StartGame()
    {
        this.uiController.GameHasStarted();
        gameSvc.game.Pick(DeckKind.VILLAIN, gameSvc.game.draft.villains[0], 0);
        gameSvc.game.Pick(DeckKind.ENVIRONMENT, gameSvc.game.draft.environments[0], 0);
        foreach (HeroCharacterDropItem item in this.heroDropZoneItems)
        {
            if (item.isPicked)
            {
                gameSvc.game.Pick(DeckKind.HERO, item.entity.identifier, item.Order);
            }
        }
        gameSvc.game.state = GameState.PLAY;
    }
    private async Task EndGame()
    {
        gameLog.AddGame(gameSvc.game);
        await gameLog.repo.Save(localStorage);
        if (settingsSvc.settings.gameEndAction == GameEndAction.START_NEW_GAME)
        {
            await this.DraftRandomGame();
        }
        else
        {
            navManager.NavigateTo("/deck-select");
        }
    }
    private async Task EndGameWin()
    {
        this.uiController.GameHasEnded();
        gameSvc.game.state = GameState.WIN;
        await this.EndGame();
    }
    private async Task EndGameLoss()
    {
        this.uiController.GameHasEnded();
        gameSvc.game.state = GameState.LOSS;
        await this.EndGame();
    }
}
